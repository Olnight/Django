pip install virtualenv
pip install virtualenvwrapper-win
pip install Django
django-admin startproject 
python manage.py startapp
python manage.py runserver
python manage.py createsuperuser 
python manage.py validate

В будущем, когда мы создаем или изменяем существующую модель необходимо обновлять Django в два этапа.
1.		Сначала мы создаем файл миграции с помощью команды makemigrations, которая генерирует команды SQL для предустановленных приложений в нашем параметре INSTALLED_APPS. Файлы миграции не выполняют эти команды в файле базы данных, а являются ссылкой на все новые изменения в наших моделях. Этот подход означает, что у нас есть запись изменений в наших моделях.
2.		Во-вторых, мы создаем фактическую базу данных с помощью migrate, которая выполняет инструкции в нашем файле migrations.

python manage.py makemigrations 
python manage.py migrate 
-- Creating the "Category" table
CREATE TABLE Category (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(50) NOT NULL UNIQUE
);

-- Creating the "Lot" table
CREATE TABLE Lot (
    id INT AUTO_INCREMENT PRIMARY KEY,
    creation_date DATETIME NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image VARCHAR(255),
    starting_price DECIMAL(10, 2) NOT NULL,
    end_date DATETIME NOT NULL,
    bidding_step DECIMAL(10, 2) NOT NULL,
    author_id INT NOT NULL,
    winner_id INT,
    category_id INT NOT NULL,
    FOREIGN KEY (author_id) REFERENCES User(id),
    FOREIGN KEY (winner_id) REFERENCES User(id),
    FOREIGN KEY (category_id) REFERENCES Category(id)
);

-- Creating the "Bid" table
CREATE TABLE Bid (
    id INT AUTO_INCREMENT PRIMARY KEY,
    date DATETIME NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    user_id INT NOT NULL,
    lot_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id),
    FOREIGN KEY (lot_id) REFERENCES Lot(id)
);

-- Creating the "User" table
CREATE TABLE User (
    id INT AUTO_INCREMENT PRIMARY KEY,
    registration_date DATETIME NOT NULL,
    email VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    contacts TEXT
);
-- Вставка данных

-- Вставка категорий
INSERT INTO Category (name, code) VALUES
    ('Электроника', 'electronics'),
    ('Одежда', 'clothing'),
    ('Искусство', 'art');

-- Вставка пользователей
INSERT INTO User (registration_date, email, name, password, contacts) VALUES
    ('2023-09-14 10:00:00', 'user1@example.com', 'Пользователь 1', 'password1', 'Контакты пользователя 1'),
    ('2023-09-14 11:00:00', 'user2@example.com', 'Пользователь 2', 'password2', 'Контакты пользователя 2');

-- Вставка объявлений
INSERT INTO Lot (creation_date, name, description, image, starting_price, end_date, bidding_step, author_id, category_id) VALUES
    ('2023-09-14 12:00:00', 'iPhone 13', 'Новый iPhone 13 в идеальном состоянии', 'iphone13.jpg', 800.00, '2023-09-20 12:00:00', 50.00, 1, 1),
    ('2023-09-14 13:00:00', 'Платье', 'Красное платье вечернее', 'dress.jpg', 120.00, '2023-09-18 15:00:00', 10.00, 2, 2);

-- Вставка ставок
INSERT INTO Bid (date, amount, user_id, lot_id) VALUES
    ('2023-09-15 14:00:00', 850.00, 2, 1),
    ('2023-09-16 11:00:00', 140.00, 1, 2);

-- Выборка данных

-- Получить список всех категорий
SELECT * FROM Category;

-- Получить список лотов, которые еще не истекли, отсортированных по дате публикации (новые к старым)
SELECT
    l.name AS lot_name,
    l.starting_price,
    l.image,
    c.name AS category_name,
    l.end_date
FROM Lot AS l
INNER JOIN Category AS c ON l.category_id = c.id
WHERE l.end_date > NOW()
ORDER BY l.creation_date DESC;

-- Показать информацию о лоте по его ID
SELECT
    l.name AS lot_name,
    l.description,
    l.starting_price,
    l.image,
    c.name AS category_name
FROM Lot AS l
INNER JOIN Category AS c ON l.category_id = c.id
WHERE l.id = 1; -- Замените на нужный ID лота

-- Обновить название лота по его идентификатору
UPDATE Lot
SET name = 'Новое название лота'
WHERE id = 1; -- Замените на нужный ID лота

-- Получить список ставок для лота по его идентификатору с сортировкой по дате
SELECT
    b.date,
    b.amount,
    l.name AS lot_name,
    u.name AS user_name
FROM Bid AS b
INNER JOIN Lot AS l ON b.lot_id = l.id
INNER JOIN User AS u ON b.user_id = u.id
WHERE b.lot_id = 1 -- Замените на нужный ID лота
ORDER BY b.date;


